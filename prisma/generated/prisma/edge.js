/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, '__esModule', { value: true });

const {
    PrismaClientKnownRequestError,
    PrismaClientUnknownRequestError,
    PrismaClientRustPanicError,
    PrismaClientInitializationError,
    PrismaClientValidationError,
    getPrismaClient,
    sqltag,
    empty,
    join,
    raw,
    skip,
    Decimal,
    Debug,
    objectEnumValues,
    makeStrictEnum,
    Extensions,
    warnOnce,
    defineDmmfProperty,
    Public,
    getRuntime,
    createParam,
} = require('./runtime/edge.js');

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.16.0
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
    client: '6.16.0',
    engine: '1c57fdcd7e44b29b9313256c76699e91c3ac3c43',
};

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError;
Prisma.PrismaClientInitializationError = PrismaClientInitializationError;
Prisma.PrismaClientValidationError = PrismaClientValidationError;
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag;
Prisma.empty = empty;
Prisma.join = join;
Prisma.raw = raw;
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = Extensions.getExtensionContext;
Prisma.defineExtension = Extensions.defineExtension;

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
    DbNull: objectEnumValues.classes.DbNull,
    JsonNull: objectEnumValues.classes.JsonNull,
    AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
});

exports.Prisma.UserScalarFieldEnum = {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
};

exports.Prisma.SortOrder = {
    asc: 'asc',
    desc: 'desc',
};

exports.Prisma.QueryMode = {
    default: 'default',
    insensitive: 'insensitive',
};
exports.ROLE = exports.$Enums.ROLE = {
    USER: 'USER',
    VENDOR: 'VENDOR',
    ADMIN: 'ADMIN',
};

exports.Prisma.ModelName = {
    User: 'User',
};
/**
 * Create the Client
 */
const config = {
    generator: {
        name: 'client',
        provider: {
            fromEnvVar: null,
            value: 'prisma-client-js',
        },
        output: {
            value: '/Users/sumithere/Desktop/freelance/car-parking-service/prisma/generated/prisma',
            fromEnvVar: null,
        },
        config: {
            engineType: 'library',
        },
        binaryTargets: [
            {
                fromEnvVar: null,
                value: 'darwin-arm64',
                native: true,
            },
        ],
        previewFeatures: [],
        sourceFilePath:
            '/Users/sumithere/Desktop/freelance/car-parking-service/prisma/schema.prisma',
        isCustomOutput: true,
    },
    relativeEnvPaths: {
        rootEnvPath: null,
        schemaEnvPath: '../../../.env',
    },
    relativePath: '../..',
    clientVersion: '6.16.0',
    engineVersion: '1c57fdcd7e44b29b9313256c76699e91c3ac3c43',
    datasourceNames: ['db'],
    activeProvider: 'postgresql',
    inlineDatasources: {
        db: {
            url: {
                fromEnvVar: 'DATABASE_URL',
                value: null,
            },
        },
    },
    inlineSchema:
        '// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = "prisma-client-js"\n  output   = "./generated/prisma"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\nenum ROLE {\n  USER\n  VENDOR\n  ADMIN\n}\n\nmodel User {\n  id        Int      @id @default(autoincrement())\n  username  String   @unique\n  email     String   @unique\n  password  String\n  role      ROLE     @default(USER)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n',
    inlineSchemaHash:
        '56158ec405698cb6e2dc05b250d5c493f1cedd8324e01816bc05e509b7be7c70',
    copyEngine: true,
};
config.dirname = '/';

config.runtimeDataModel = JSON.parse(
    '{"models":{"User":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"Int","nativeType":null,"default":{"name":"autoincrement","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"username","kind":"scalar","isList":false,"isRequired":true,"isUnique":true,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"email","kind":"scalar","isList":false,"isRequired":true,"isUnique":true,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"password","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"role","kind":"enum","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"ROLE","nativeType":null,"default":"USER","isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":true}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false}},"enums":{"ROLE":{"values":[{"name":"USER","dbName":null},{"name":"VENDOR","dbName":null},{"name":"ADMIN","dbName":null}],"dbName":null}},"types":{}}'
);
defineDmmfProperty(exports.Prisma, config.runtimeDataModel);
config.engineWasm = undefined;
config.compilerWasm = undefined;

config.injectableEdgeEnv = () => ({
    parsed: {
        DATABASE_URL:
            (typeof globalThis !== 'undefined' && globalThis['DATABASE_URL']) ||
            (typeof process !== 'undefined' &&
                process.env &&
                process.env.DATABASE_URL) ||
            undefined,
    },
});

if (
    (typeof globalThis !== 'undefined' && globalThis['DEBUG']) ||
    (typeof process !== 'undefined' && process.env && process.env.DEBUG) ||
    undefined
) {
    Debug.enable(
        (typeof globalThis !== 'undefined' && globalThis['DEBUG']) ||
            (typeof process !== 'undefined' &&
                process.env &&
                process.env.DEBUG) ||
            undefined
    );
}

const PrismaClient = getPrismaClient(config);
exports.PrismaClient = PrismaClient;
Object.assign(exports, Prisma);
